FastAPI란?
비동기 프레임워크인 Starlette(스타레테)를 기반으로 웹 요청을 처리

데이터 검증과 설계를 위해 Pydantic(파이단틱)라이브러리 사용

비동기 프로그래밍을 지원 : 하나의 작업이 끝날 때까지 멈춰 기다리지 않고, 동시에 다른 작업도 처리할 수 있는 프로그램

RESTful API = 자원(URL)을 정의하고, 그 자원에 대한 행위를 HTTP 메서드로 나눠서 표현하는 설계 방식.

보일러플레이트 코드 = 정해진 규칙 때문에 항상 반복해서 써야 하는 코드

I/O-bound 작업 = 성능이 I/O(네트워크, 파일, DB 등)에 묶여 있는 작업.
"응답이 올 때까지 기다려야 한다" → I/O-bound 작업 (맞음!)

용어 정리
 - 엔드포인트 : "문" (어떤 URL/메서드로 들어올 수 있냐), URL + 메서드
 - return : "그 문을 열었을 때 서버가 주는 응답", 그 엔드포인트가 실행됐을 때 클라이언트에 주는 결과

FastAPI를 사용하는 이유
- 성능 : 
- 자동 문서와 : 
- 쉬운 유효성 검사 :
- 비동기 프로그래밍 : 
Flask: 코드만 쓰면 API는 동작하지만, 문서화는 수동으로 작성해야 함.
FastAPI: 코드에 타입 힌트 + Pydantic 모델만 추가하면, API 명세서가 자동으로 생성됨.
👉 그래서 기업에서 FastAPI가 협업/테스트에 유리하다는 말이 나오는 거야.

(2)API테스트: Swagger UI 또는 리독에서 직접 API를 호출하여 테스트 할 수 있습니다.

- 프로그래밍 언어
Bounding = 경계/제한/한계 설정
알고리즘: 수행 시간/공간에 대한 한계
타입 시스템: 제네릭 타입의 범위 제한
그래픽스: 객체 위치나 크기 범위
일반 로직: 값이 특정 범위를 넘지 못하게 제한